// <Your name>
// <Created date>
// Goldfish Memory Game

#include <Arduboy2.h>

const int gameLen = 5;
int currSeq[gameLen];
int gamestate = 0;

Arduboy2 ab;

PROGMEM const unsigned char up_Arrow [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff,
	0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

PROGMEM const unsigned char down_Arrow [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff,
	0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

PROGMEM const unsigned char left_Arrow []{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
	0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

PROGMEM const unsigned char right_Arrow []{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

PROGMEM const unsigned char sad_Face[]{
	0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x04, 0x06, 0x02, 0x02, 0x03, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x03, 0x02, 0x02, 0x02, 0x06, 0x04, 0x0c, 0x38, 0x70, 0xc0, 0x80, 0x00, 0x00,
	0xf0, 0x1e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00, 0xf8,
	0xf8, 0x00, 0x00, 0x00, 0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1e, 0xf0,
	0x0f, 0x78, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x83,
	0x83, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x78, 0x0f,
	0x00, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x20, 0x66, 0x45, 0x44, 0xc4, 0x84, 0x84, 0x84,
	0x84, 0x84, 0x84, 0xc4, 0x44, 0x45, 0x66, 0x20, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x00, 0x00,
};

PROGMEM const unsigned char happy_Face[]{
    0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x04, 0x06, 0x02, 0x02, 0x03, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x03, 0x02, 0x02, 0x02, 0x06, 0x04, 0x0c, 0x38, 0x70, 0xc0, 0x80, 0x00, 0x00,
    0xf0, 0x1e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00, 0xf8,
    0xf8, 0x00, 0x00, 0x00, 0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1e, 0xf0,
    0x0f, 0x78, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x83,
    0x83, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x78, 0x0f,
    0x00, 0x00, 0x01, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x20, 0x60, 0x41, 0x42, 0xc4, 0x84, 0x84, 0x84,
    0x84, 0x84, 0x84, 0xc4, 0x42, 0x41, 0x60, 0x20, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x00, 0x00,
};


// the setup function runs once when you press reset or power the board
void setup() {
  ab.begin();       //initialise the system
  ab.setFrameRate(60);
}


// the loop function runs over and over again until power down or reset
void loop() {
  //Prevent the Arduboy from running too fast
  if (!(ab.nextFrame()))  return;
  
  ab.pollButtons();
  
  //Game code here
  switch( gamestate ) {
    case 0:
      startScreen();
      break;
    case 1:
      gameScreen();
      break;
    case 2:
      winScreen();
      break;
    case 3:
      loseScreen();
      break;
  }
}


void startScreen() {
  ab.clear();
  ab.setTextSize(2);
  ab.setCursor(16,0);
  ab.println("Goldfish");
  ab.setCursor(27, 15);
  ab.println("Memory");
  ab.setTextSize(1);
  ab.setCursor(15, 55);
  ab.println("Press A to Begin");
  ab.display();
  
  if(ab.justPressed(A_BUTTON)) {
    gamestate = 1;
  }
}

void gameScreen() {
  ab.clear();				// clear display
	ab.initRandomSeed();	// Generate the random seed
	ab.display();
	
  // generate 'random' sequence for current round
  // the random number represents the U/D/L/R sequence & image.
  for (int i = 0; i < gameLen; i++) {
    currSeq[i] = random(0, 4);

    if (currSeq[i] == 0) {
      ab.drawBitmap(48, 0, up_Arrow, 32, 32, WHITE);  // display the image
      ab.display();
      delay(1000);
      ab.drawBitmap(48, 0, up_Arrow, 32, 32, BLACK);  // turn it off
      ab.display();
      delay(500);
    }
    else if (currSeq[i] == 1)
    {
      ab.drawBitmap(96, 15, right_Arrow, 32, 32, WHITE);
      ab.display();
      delay(1000);
      ab.drawBitmap(96, 15, right_Arrow, 32, 32, BLACK);
      ab.display();
      delay(500);
    }
    else if (currSeq[i] == 2)
    {
      ab.drawBitmap(48, 32, down_Arrow, 32, 32, WHITE);
      ab.display();
      delay(1000);
      ab.drawBitmap(48, 32, down_Arrow, 32, 32, BLACK);
      ab.display();
      delay(500);
    }
    else if (currSeq[i] == 3)
    {
      ab.drawBitmap(0, 15, left_Arrow, 32, 32, WHITE);
      ab.display();
      delay(1000);
      ab.drawBitmap(0, 15, left_Arrow, 32, 32, BLACK);
      ab.display();
      delay(500);
    }
  }
  
  // display get ready
  for (int j = 3; j > 0; j--) {
    ab.clear();
    ab.setCursor(35, 25);
    ab.print("Get Ready!");
    ab.setCursor(60, 35);
    ab.print(j);
    ab.display();
    delay(500);
  }
  ab.clear();
  ab.display();
  
  checkAnswer();
}

void loseScreen() {
  ab.clear();
  ab.setCursor(32, 0);
  ab.print("You LOOOSE");
  ab.drawBitmap(48, 16, sad_Face, 32, 32, WHITE);
  ab.setCursor(15, 55);
  ab.println("Press A to Retry");
  ab.display();
  
  if(ab.justPressed(A_BUTTON)) {
    gamestate = 1;
  }
}

void winScreen() {
  ab.clear();
  ab.setCursor(32, 0);
  ab.print("You WIN!!!");
  ab.drawBitmap(48, 16, happy_Face, 32, 32, WHITE);
  ab.setCursor(15, 55);
  ab.println("Press A to Replay");
  ab.display();
  
  if(ab.justPressed(A_BUTTON)) {
    gamestate = 1;
  }
}

void checkAnswer() {
  // allow loop through 
  int i = 0;
  
  do {
    // this needs to be set to ensure the button presses / releases are seen by the Arduboy.
    ab.pollButtons();
    
    if (ab.justReleased(UP_BUTTON)){
      ab.drawBitmap(48, 0, up_Arrow, 32, 32, WHITE);  // display the image
      ab.display();
      delay(500);
      ab.drawBitmap(48, 0, up_Arrow, 32, 32, BLACK);  // turn it off
      ab.display();
      if (currSeq[i] == 0) {
        //correct guess continue...
        i++;
      }
      else
      {
        break;
      }
    }

    if (ab.justReleased(DOWN_BUTTON)){
      ab.drawBitmap(48, 32, down_Arrow, 32, 32, WHITE);
      ab.display();
      delay(500);
      ab.drawBitmap(48, 32, down_Arrow, 32, 32, BLACK);
      ab.display();
      if (currSeq[i] == 2) {
        //correct guess continue...
        i++;
      }
      else
      {
        break;
      }
    }

    if (ab.justReleased(LEFT_BUTTON)){
      ab.drawBitmap(0, 15, left_Arrow, 32, 32, WHITE);
      ab.display();
      delay(500);
      ab.drawBitmap(0, 15, left_Arrow, 32, 32, BLACK);
      ab.display();
      if (currSeq[i] == 3) {
        //correct guess continue...
        i++;
      }
      else
      {
        break;
      }
    }

    if (ab.justReleased(RIGHT_BUTTON)){
      ab.drawBitmap(96, 15, right_Arrow, 32, 32, WHITE);
      ab.display();
      delay(500);
      ab.drawBitmap(96, 15, right_Arrow, 32, 32, BLACK);
      ab.display();
      if (currSeq[i] == 1) {
        //correct guess continue...
        i++;
      }
      else
      {
        break;
      }
    }

  } while (i < gameLen);
  
  // win game
  if( i == gameLen) {
    gamestate = 2;
  // lose game
  } else {
    gamestate = 3;
  }
}
